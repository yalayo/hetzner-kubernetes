name: Infrastructure

on:
  push:
    branches: [ master ]
  #workflow_dispatch:

jobs:
  infrastructure:
    name: Create/Update sever
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install hcloud CLI
        run: |
          set -eux
          curl -fsSL https://github.com/hetznercloud/cli/releases/latest/download/hcloud-linux-amd64.tar.gz -o hcloud.tar.gz
          tar -xzf hcloud.tar.gz
          chmod +x hcloud
          sudo mv hcloud /usr/local/bin/
          rm -f hcloud.tar.gz
          /usr/local/bin/hcloud version
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Deploy with Terraform
        env:
          HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}
          TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN }}
          TF_VAR_ssh_private_key: ${{ secrets.SSH_PRIVATE_kEY }}
          TF_VAR_k3s_token: ${{ secrets.K3S_TOKEN }}
        run: |
            set -eux
            # ensure hcloud is on PATH and executable
            export PATH=$PATH:/usr/local/bin
            which hcloud
            hcloud version

            cd ./terraform
            terraform init
            terraform apply -auto-approve -target=hcloud_server.master -auto-approve

            # Capture output, redirect stderr to avoid debug logs polluting output
            MASTER_IP=$(terraform output -raw master_ip | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n1)
            MASTER_IP="${MASTER_IP//[$'\r\n']}"

            echo "MASTER_IP=$MASTER_IP" >> $GITHUB_ENV

      - name: Wait for rescue SSH and inject public key
        env:
          HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}
        run: |
          set -eux
          cd terraform
          
          RAW=$(hcloud server enable-rescue prod-master --type linux64)
          RESCUE_PASSWORD=$(printf "%s" "$RAW" | grep -oP '(?<=root password: ).*' | awk '{print $1}')
          RESCUE_PASSWORD=${RESCUE_PASSWORD#\"}; RESCUE_PASSWORD=${RESCUE_PASSWORD%\"}
          RESCUE_PASSWORD=${RESCUE_PASSWORD#\'}; RESCUE_PASSWORD=${RESCUE_PASSWORD%\'} 

          if [ -z "$RESCUE_PASSWORD" ]; then
            echo "Failed to parse rescue password from output:"
            echo "$RAW"
            exit 1
          fi

          hcloud server reset prod-master

          echo "Waiting for rescue SSH to accept password..."
          until sshpass -p "$RESCUE_PASSWORD" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@$MASTER_IP 'echo up'; do
            sleep 5
          done

          echo "Injecting public key into rescue root account"
          # Ensure the public key is available; you can store it as a secret named SSH_PUBLIC_KEY
          PUBKEY="${{ secrets.SSH_PUBLIC_KEY }}"
          sshpass -p "$RESCUE_PASSWORD" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@$MASTER_IP bash -eux <<EOF
          mkdir -p ~/.ssh
          echo '$PUBKEY' >> ~/.ssh/authorized_keys
          chmod 700 ~/.ssh
          chmod 600 ~/.ssh/authorized_keys
          EOF

          # Disable rescue mode before rebooting
          hcloud server disable-rescue prod-master

          # Then reboot the server
          sshpass -p "$RESCUE_PASSWORD" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@$MASTER_IP reboot

      - name: Full Terraform apply (bootstrap NixOS)
        env:
          TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN }}
          TF_VAR_ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
          TF_VAR_k3s_token: ${{ secrets.K3S_TOKEN }}
        run: |
          set -eux
          cd terraform
          terraform apply -auto-approve