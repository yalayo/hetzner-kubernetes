name: Infrastructure

on:
  push:
    branches: [ master ]
  #workflow_dispatch:

jobs:
  infrastructure:
    name: Create/Update sever
    runs-on: ubuntu-latest
    env:
      # fallback if needed; better to pass per-step when required
      NIX_PATH: nixpkgs=channel:nixos-24.11
    steps:
      - uses: actions/checkout@v3
      - name: Cache Nix store (optional speedup)
        uses: actions/cache@v4
        with:
          path: /nix/store
          key: nix-store-${{ runner.os }}-${{ github.sha }}
          # note: caching /nix/store can be huge; adjust strategy if too large
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v10
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Deploy with Terraform
        env:
          TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN }}
          TF_VAR_ssh_private_key: ${{ secrets.SSH_PRIVATE_kEY }}
          TF_VAR_k3s_token: ${{ secrets.K3S_TOKEN }}
        run: |
            cd ./terraform
            terraform init
            terraform apply -auto-approve

            # Capture output, redirect stderr to avoid debug logs polluting output
            MASTER_IP=$(terraform output -raw master_ip | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n1)
            MASTER_IP="${MASTER_IP//[$'\r\n']}"

            echo "MASTER_IP=$MASTER_IP" >> $GITHUB_ENV
      - name: Prepare SSH key and config for nixos-anywhere
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          # Write private key to file
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_nixos_anywhere
          chmod 600 ~/.ssh/id_nixos_anywhere

          # Optional: tighten SSH client usage
          cat <<EOF > ~/.ssh/config
          Host prod-master
            HostName $MASTER_IP
            User root
            IdentityFile ~/.ssh/id_nixos_anywhere
            IdentitiesOnly yes
            StrictHostKeyChecking no
          EOF
          chmod 600 ~/.ssh/config

          # (Optional but safer) populate known_hosts to avoid initial prompt
          ssh-keyscan -H "$MASTER_IP" >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Seed k3s token on target
        run: |
          set -euo pipefail
          echo "Writing k3s token to remote using explicit identity file"
          # Base64 encode locally so we can safely transmit arbitrary token content
          TOKEN_B64=$(printf '%s' "${{ secrets.K3S_TOKEN }}" | base64 -w0)

          ssh -i ~/.ssh/id_nixos_anywhere \
              -o StrictHostKeyChecking=no \
              -o IdentitiesOnly=yes \
              -o UserKnownHostsFile=/dev/null \
              root@${MASTER_IP} \
              "printf '%s' '${TOKEN_B64}' | base64 -d > /etc/k3s-token && chmod 600 /etc/k3s-token"

      - name: Install NixOS remotely
        run: |
          set -euo pipefail
          echo "Deploying to host $MASTER_IP"
          
          # Use the host alias so the private key from config is used
          nix run github:nix-community/nixos-anywhere -- \
            --flake ./terraform/nixos#prod-master \
            --no-root-password \
            --target-host "root@$MASTER_IP"